// Generated by Selenium IDE
const { Builder, By, Key, until, Capabilities  } = require('selenium-webdriver')
const assert = require('assert')
var capabilities = Capabilities.firefox();

const expectedDeployment = "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kube-me\n  namespace: tiny-tenant\n  labels:\n    app: kube-me\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kube-me\n  template:\n    metadata:\n      labels:\n        app: kube-me\n    spec:\n      containers:\n        - name: kube-me\n          image: \\\'asawakow/kube-me:latest\\\'\n          resources:\n            requests:\n              cpu: 150m\n              memory: 128Mi\n            limits:\n              cpu: 300m\n              memory: 384Mi\n          env:\n            - name: MY-PORT\n              value: \\\'3000\\\'\n            - name: MY-TINY\n              value: KUBE-ME\n          ports:\n            - name: http-kubeme\n              containerPort: 80\n              protocol: TCP";
const expectedService = "apiVersion: v1\nkind: Service\nmetadata:\n  name: kube-me\n  namespace: tiny-tenant\n  labels:\n    app: kube-me\nspec:\n  type: NodePort\n  selector:\n    app: kube-me\n  ports:\n    - name: http-kubeme\n      protocol: TCP\n      port: 80\n      targetPort: 80";

describe('kube-me-stateless', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder()
    .usingServer("http://localhost:4444/wd/hub") 
    .forBrowser('firefox')
    .withCapabilities(capabilities)
    .build();
    //.withCapabilities(capabilities)
    //.setChromeOptions(opts)
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('kube-me-stateless', async function() {
    
    await driver.get("http://192.168.1.98:3000/")
    await driver.findElement(By.css(".container > .btn")).click()
    await driver.findElement(By.linkText("STATELESS APPLICATION")).click()
    await driver.findElement(By.name("name")).sendKeys("kube-me")
    await driver.findElement(By.name("namespace")).sendKeys("tiny-tenant")
    await driver.findElement(By.name("replicas")).sendKeys("5")
    await driver.findElement(By.name("image")).click()
    await driver.findElement(By.name("image")).sendKeys("asawakow/kube-me:latest")
    await driver.findElement(By.name("requestCpu")).click()
    await driver.findElement(By.name("requestCpu")).sendKeys("150m")
    await driver.findElement(By.name("requestMemory")).sendKeys("128Mi")
    await driver.findElement(By.name("limitCpu")).sendKeys("300m")
    await driver.findElement(By.name("limitMemory")).sendKeys("384Mi")
    await driver.findElement(By.name("envs.0.name")).sendKeys("MY-PORT")
    await driver.findElement(By.name("envs.0.value")).sendKeys("3000")
    await driver.findElement(By.css(".fade:nth-child(1) div:nth-child(22) > .row > .btn")).click()
    await driver.findElement(By.name("envs.1.name")).sendKeys("MY-TINY")
    await driver.findElement(By.name("envs.1.value")).sendKeys("KUBE-ME")
    await driver.findElement(By.name("ports.0.name")).sendKeys("http-kubeme")
    await driver.findElement(By.css(".btn:nth-child(27)")).click()
    console.log(await driver.findElement(By.css(".fade:nth-child(1) .col:nth-child(1) .col:nth-child(1) .card-text:nth-child(1)")).getText());
    console.log(expectedDeployment);
    console.log(await driver.findElement(By.css(".fade:nth-child(1) .col:nth-child(2) .card-text:nth-child(1)")).getText());
    console.log(expectedService);
    assert(await driver.findElement(By.css(".fade:nth-child(1) .col:nth-child(1) .col:nth-child(1) .card-text:nth-child(1)")).getText() == expectedDeployment)
    assert(await driver.findElement(By.css(".fade:nth-child(1) .col:nth-child(2) .card-text:nth-child(1)")).getText() == expectedService)
  })
})
